// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api_vendace.Data;

#nullable disable

namespace api_vendamode.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendace.Entities.Products.Brand>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Placeholder")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("BrandImages");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendace.Entities.Products.Category>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Placeholder")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("CategoryImages");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendace.Entities.Products.Product>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Placeholder")
                        .HasColumnType("text");

                    b.Property<Guid?>("ReviewId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("ReviewId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendace.Entities.Products.ProductSize>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Placeholder")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ProductSizeImages");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendace.Entities.Products.Review>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Placeholder")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ReviewImages");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendace.Entities.Users.User>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Placeholder")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("UserImages");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendace.Entities.Users.UserSpecification>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Placeholder")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("UserSpecificationImages");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("InSlider")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MainCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.FeatureValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("HexCode")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProductFeatureId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductFeatureId");

                    b.ToTable("FeatureValues");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Points", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("NegativeReviewId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PositiveReviewId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NegativeReviewId");

                    b.HasIndex("PositiveReviewId");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryLevelsId")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Discount")
                        .HasColumnType("double precision");

                    b.Property<List<Guid>>("FeatureValueIds")
                        .HasColumnType("uuid[]");

                    b.Property<int>("InStock")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFake")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NumReviews")
                        .HasColumnType("integer");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ProductScaleId")
                        .HasColumnType("uuid");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Sold")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CategoryLevelsId");

                    b.HasIndex("ProductScaleId")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.ProductFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductFeatures");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.ProductScale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ProductScales");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.ProductSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("SizeType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ProductSizes");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.ProductSizeValues", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProductSizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductSizeId");

                    b.ToTable("ProductSizeValues");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Sizes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ProductSizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductSizeId");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("api_vendace.Entities.Users.Security.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentPermissionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentPermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("api_vendace.Entities.Users.Security.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("api_vendace.Entities.Users.Security.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RefreshTokenTimeout")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("api_vendace.Entities.Users.Security.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("api_vendace.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("api_vendace.Entities.Users.UserSpecification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastActivity")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PassCode")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("Roles")
                        .HasColumnType("text[]");

                    b.Property<string>("SecondAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShabaNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TelePhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSpecifications");
                });

            modelBuilder.Entity("api_vendace.Models.Dtos.EntityImageDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryLevelsId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Placeholder")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryLevelsId");

                    b.ToTable("EntityImageDto");
                });

            modelBuilder.Entity("api_vendace.Models.Dtos.ProductDto.Category.CategoryLevels", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CategoryLevels");
                });

            modelBuilder.Entity("api_vendace.Models.Dtos.ProductDto.Sizes.SizeIds", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ProductScaleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductScaleId");

                    b.ToTable("SizeIds");
                });

            modelBuilder.Entity("api_vendace.Models.Dtos.ProductDto.Sizes.SizeModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProductScaleId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductSizeValueId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductSizeValueName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("ScaleValues")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("ProductScaleId");

                    b.ToTable("SizeModels");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendace.Entities.Products.Brand>", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.Brand", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendace.Entities.Products.Category>", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.Category", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendace.Entities.Products.Product>", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.Product", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_vendace.Entities.Products.Review", null)
                        .WithMany("ProductImage")
                        .HasForeignKey("ReviewId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendace.Entities.Products.ProductSize>", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.ProductSize", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendace.Entities.Products.Review>", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.Review", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendace.Entities.Users.User>", b =>
                {
                    b.HasOne("api_vendace.Entities.Users.User", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendace.Entities.Users.UserSpecification>", b =>
                {
                    b.HasOne("api_vendace.Entities.Users.UserSpecification", "Entity")
                        .WithMany("IdCardImages")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Category", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.Category", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.FeatureValue", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.ProductFeature", "ProductFeature")
                        .WithMany("Values")
                        .HasForeignKey("ProductFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductFeature");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Points", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.Review", null)
                        .WithMany("NegativePoints")
                        .HasForeignKey("NegativeReviewId");

                    b.HasOne("api_vendace.Entities.Products.Review", null)
                        .WithMany("PositivePoints")
                        .HasForeignKey("PositiveReviewId");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Product", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("api_vendace.Entities.Products.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_vendace.Models.Dtos.ProductDto.Category.CategoryLevels", "CategoryLevels")
                        .WithMany()
                        .HasForeignKey("CategoryLevelsId");

                    b.HasOne("api_vendace.Entities.Products.ProductScale", "ProductScale")
                        .WithOne("Product")
                        .HasForeignKey("api_vendace.Entities.Products.Product", "ProductScaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("CategoryLevels");

                    b.Navigation("ProductScale");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.ProductFeature", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.Category", "Category")
                        .WithMany("ProductFeatures")
                        .HasForeignKey("CategoryId");

                    b.HasOne("api_vendace.Entities.Products.Product", "Product")
                        .WithMany("ProductFeatures")
                        .HasForeignKey("ProductId");

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.ProductSize", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.Category", "Category")
                        .WithOne("ProductSizes")
                        .HasForeignKey("api_vendace.Entities.Products.ProductSize", "CategoryId");

                    b.HasOne("api_vendace.Entities.Products.Product", "Product")
                        .WithOne("ProductSizes")
                        .HasForeignKey("api_vendace.Entities.Products.ProductSize", "ProductId");

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.ProductSizeValues", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.ProductSize", "ProductSize")
                        .WithMany("ProductSizeValues")
                        .HasForeignKey("ProductSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductSize");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Review", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.Product", "Product")
                        .WithMany("Review")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_vendace.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Sizes", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.ProductSize", "ProductSize")
                        .WithMany("Sizes")
                        .HasForeignKey("ProductSizeId");

                    b.Navigation("ProductSize");
                });

            modelBuilder.Entity("api_vendace.Entities.Users.Security.Permission", b =>
                {
                    b.HasOne("api_vendace.Entities.Users.Security.Permission", "ParentPermission")
                        .WithMany("ChildPermissions")
                        .HasForeignKey("ParentPermissionId");

                    b.HasOne("api_vendace.Entities.Users.Security.Role", null)
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId");

                    b.Navigation("ParentPermission");
                });

            modelBuilder.Entity("api_vendace.Entities.Users.Security.Role", b =>
                {
                    b.HasOne("api_vendace.Entities.Users.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("api_vendace.Entities.Users.Security.UserRefreshToken", b =>
                {
                    b.HasOne("api_vendace.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("api_vendace.Entities.Users.Security.UserRole", b =>
                {
                    b.HasOne("api_vendace.Entities.Users.Security.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_vendace.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api_vendace.Entities.Users.UserSpecification", b =>
                {
                    b.HasOne("api_vendace.Entities.Users.User", null)
                        .WithOne("UserSpecification")
                        .HasForeignKey("api_vendace.Entities.Users.UserSpecification", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api_vendace.Models.Dtos.EntityImageDto", b =>
                {
                    b.HasOne("api_vendace.Models.Dtos.ProductDto.Category.CategoryLevels", null)
                        .WithMany("ImagesSrc")
                        .HasForeignKey("CategoryLevelsId");
                });

            modelBuilder.Entity("api_vendace.Models.Dtos.ProductDto.Sizes.SizeIds", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.ProductScale", null)
                        .WithMany("Columns")
                        .HasForeignKey("ProductScaleId");
                });

            modelBuilder.Entity("api_vendace.Models.Dtos.ProductDto.Sizes.SizeModel", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.ProductScale", null)
                        .WithMany("Rows")
                        .HasForeignKey("ProductScaleId");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Brand", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Category", b =>
                {
                    b.Navigation("ChildCategories");

                    b.Navigation("Images");

                    b.Navigation("ProductFeatures");

                    b.Navigation("ProductSizes");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("ProductFeatures");

                    b.Navigation("ProductSizes");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.ProductFeature", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.ProductScale", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Product");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.ProductSize", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("ProductSizeValues");

                    b.Navigation("Sizes");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Review", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("NegativePoints");

                    b.Navigation("PositivePoints");

                    b.Navigation("ProductImage");
                });

            modelBuilder.Entity("api_vendace.Entities.Users.Security.Permission", b =>
                {
                    b.Navigation("ChildPermissions");
                });

            modelBuilder.Entity("api_vendace.Entities.Users.Security.Role", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("api_vendace.Entities.Users.User", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Roles");

                    b.Navigation("UserSpecification")
                        .IsRequired();
                });

            modelBuilder.Entity("api_vendace.Entities.Users.UserSpecification", b =>
                {
                    b.Navigation("IdCardImages");
                });

            modelBuilder.Entity("api_vendace.Models.Dtos.ProductDto.Category.CategoryLevels", b =>
                {
                    b.Navigation("ImagesSrc");
                });
#pragma warning restore 612, 618
        }
    }
}
