// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api_vendace.Data;

#nullable disable

namespace api_vendamode.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240828104304_InitSloganFooter")]
    partial class InitSloganFooter
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProductProductFeature", b =>
                {
                    b.Property<Guid>("ProductFeaturesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductFeaturesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ProductProductFeature");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendace.Entities.Products.Brand>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Placeholder")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("BrandImages");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendace.Entities.Products.Category>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Placeholder")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("CategoryImages");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendace.Entities.Products.Product>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Placeholder")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendace.Entities.Products.ProductSize>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Placeholder")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ProductSizeImages");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendace.Entities.Products.Review>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Placeholder")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ReviewImages");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendace.Entities.Users.User>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Placeholder")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("UserImages");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendace.Entities.Users.UserSpecification>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Placeholder")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("UserSpecificationImages");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendace.Models.Dtos.ProductDto.Stock.StockItem>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Placeholder")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("StockImages");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendamode.Entities.Designs.DesignItem>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Placeholder")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId")
                        .IsUnique();

                    b.ToTable("DesignItemImages");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendamode.Entities.Designs.LogoImages>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Placeholder")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId")
                        .IsUnique();

                    b.ToTable("FaviconThumbnailImages");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendamode.Entities.Products.Article>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Placeholder")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId")
                        .IsUnique();

                    b.ToTable("ArticleImages");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendamode.Entities.Products.Banner>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Placeholder")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId")
                        .IsUnique();

                    b.ToTable("BannerImages");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendamode.Entities.Products.FooterBanner>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Placeholder")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId")
                        .IsUnique();

                    b.ToTable("FooterBannerImages");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendamode.Entities.Products.Order>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Placeholder")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId")
                        .IsUnique();

                    b.ToTable("PurchaseInvoice");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendamode.Entities.Products.Slider>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Placeholder")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId")
                        .IsUnique();

                    b.ToTable("SliderImages");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendamode.Models.Dtos.DescriptionEntity>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Placeholder")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId")
                        .IsUnique();

                    b.ToTable("MediaImages");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityMainImage<System.Guid, api_vendace.Entities.Products.Product>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Placeholder")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId")
                        .IsUnique();

                    b.ToTable("ProductMainImages");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityMainImage<System.Guid, api_vendamode.Entities.Designs.LogoImages>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Placeholder")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId")
                        .IsUnique();

                    b.ToTable("OrgThumbnailImages");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("InSlider")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasSizeProperty")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActiveProduct")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MainCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.FeatureValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("HexCode")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProductFeatureId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductFeatureId");

                    b.ToTable("FeatureValues");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Points", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Guid?>("NegativeReviewId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PositiveReviewId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NegativeReviewId");

                    b.HasIndex("PositiveReviewId");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryLevelsId")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Discount")
                        .HasColumnType("double precision");

                    b.Property<List<Guid>>("FeatureValueIds")
                        .HasColumnType("uuid[]");

                    b.Property<int>("InStock")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFake")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NumReviews")
                        .HasColumnType("integer");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ProductScaleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductSizesId")
                        .HasColumnType("uuid");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Sold")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CategoryLevelsId");

                    b.HasIndex("ProductScaleId")
                        .IsUnique();

                    b.HasIndex("ProductSizesId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.ProductFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ProductFeatures");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.ProductScale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ProductScales");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.ProductSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SizeType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ProductSizes");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.ProductSizeValues", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProductSizeValues");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Sizes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ProductSizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductSizeId");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("api_vendace.Entities.Users.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("api_vendace.Entities.Users.Security.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentPermissionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentPermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("api_vendace.Entities.Users.Security.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("api_vendace.Entities.Users.Security.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RefreshTokenTimeout")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("api_vendace.Entities.Users.Security.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("api_vendace.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("api_vendace.Entities.Users.UserSpecification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastActivity")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PassCode")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("Roles")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("SecondAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShabaNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TelePhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSpecifications");
                });

            modelBuilder.Entity("api_vendace.Models.Dtos.ObjectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ObjectValue");
                });

            modelBuilder.Entity("api_vendace.Models.Dtos.ProductDto.Category.CategoryLevels", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CategoryLevels");
                });

            modelBuilder.Entity("api_vendace.Models.Dtos.ProductDto.Sizes.SizeIds", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProductScaleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductScaleId");

                    b.ToTable("SizeIds");
                });

            modelBuilder.Entity("api_vendace.Models.Dtos.ProductDto.Sizes.SizeModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Idx")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModelSizeId")
                        .HasColumnType("text");

                    b.Property<Guid>("ProductScaleId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductSizeValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductSizeValueId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("ScaleValues")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("ProductScaleId");

                    b.ToTable("SizeModels");
                });

            modelBuilder.Entity("api_vendace.Models.Dtos.ProductDto.Stock.StockItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalProperties")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Discount")
                        .HasColumnType("double precision");

                    b.Property<List<Guid>>("FeatureValueId")
                        .HasColumnType("uuid[]");

                    b.Property<string>("Idx")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("OfferEndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("OfferStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("OfferTime")
                        .HasColumnType("integer");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SizeId")
                        .HasColumnType("uuid");

                    b.Property<int>("StockId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("StockItems");
                });

            modelBuilder.Entity("api_vendamode.Entities.ArticleReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("ArticleReviews");
                });

            modelBuilder.Entity("api_vendamode.Entities.Canceled", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CanceledType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Canceleds");
                });

            modelBuilder.Entity("api_vendamode.Entities.Designs.DesignItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DesignItems");
                });

            modelBuilder.Entity("api_vendamode.Entities.Designs.GeneralSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GoogleTags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ShortIntroduction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GeneralSettings");
                });

            modelBuilder.Entity("api_vendamode.Entities.Designs.LogoImages", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("LogoImages");
                });

            modelBuilder.Entity("api_vendamode.Entities.Designs.SloganFooter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Headline")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IntroductionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SloganFooters");
                });

            modelBuilder.Entity("api_vendamode.Entities.Products.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Place")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("api_vendamode.Entities.Products.ArticleBanner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticleBanners");
                });

            modelBuilder.Entity("api_vendamode.Entities.Products.Banner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("api_vendamode.Entities.Products.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Discount")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("FeaturesId")
                        .HasColumnType("uuid");

                    b.Property<int>("InStock")
                        .HasColumnType("integer");

                    b.Property<string>("ItemID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Sold")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FeaturesId");

                    b.HasIndex("OrderId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("api_vendamode.Entities.Products.CategoryProductFeature", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductFeatureId")
                        .HasColumnType("uuid");

                    b.HasKey("CategoryId", "ProductFeatureId");

                    b.HasIndex("ProductFeatureId");

                    b.ToTable("CategoryProductFeatures");
                });

            modelBuilder.Entity("api_vendamode.Entities.Products.CategoryProductSize", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductSizeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("CategoryId", "ProductSizeId");

                    b.HasIndex("ProductSizeId");

                    b.ToTable("CategoryProductSizes");
                });

            modelBuilder.Entity("api_vendamode.Entities.Products.CategorySize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SizeId");

                    b.ToTable("CategorySizes");
                });

            modelBuilder.Entity("api_vendamode.Entities.Products.FooterBanner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FooterBanners");
                });

            modelBuilder.Entity("api_vendamode.Entities.Products.HeaderText", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("HeaderTexts");
                });

            modelBuilder.Entity("api_vendamode.Entities.Products.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CanceledId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfPayment")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Delivered")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrderNum")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("OrgPrice")
                        .HasColumnType("double precision");

                    b.Property<bool>("Paid")
                        .HasColumnType("boolean");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ReturnedId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double>("TotalDiscount")
                        .HasColumnType("double precision");

                    b.Property<int>("TotalItems")
                        .HasColumnType("integer");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CanceledId");

                    b.HasIndex("ReturnedId");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("api_vendamode.Entities.Products.ProductSizeProductSizeValue", b =>
                {
                    b.Property<Guid>("ProductSizeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductSizeValueId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductSizeId", "ProductSizeValueId");

                    b.HasIndex("ProductSizeValueId");

                    b.ToTable("ProductSizeProductSizeValues");
                });

            modelBuilder.Entity("api_vendamode.Entities.Products.Slider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sliders");
                });

            modelBuilder.Entity("api_vendamode.Entities.Products.StoreCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("StoreCategories");
                });

            modelBuilder.Entity("api_vendamode.Entities.Returned", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CanceledType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Returneds");
                });

            modelBuilder.Entity("api_vendamode.Models.Dtos.DescriptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Descriptions");
                });

            modelBuilder.Entity("ProductProductFeature", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.ProductFeature", null)
                        .WithMany()
                        .HasForeignKey("ProductFeaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_vendace.Entities.Products.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendace.Entities.Products.Brand>", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.Brand", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendace.Entities.Products.Category>", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.Category", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendace.Entities.Products.Product>", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.Product", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendace.Entities.Products.ProductSize>", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.ProductSize", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendace.Entities.Products.Review>", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.Review", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendace.Entities.Users.User>", b =>
                {
                    b.HasOne("api_vendace.Entities.Users.User", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendace.Entities.Users.UserSpecification>", b =>
                {
                    b.HasOne("api_vendace.Entities.Users.UserSpecification", "Entity")
                        .WithMany("IdCardImages")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendace.Models.Dtos.ProductDto.Stock.StockItem>", b =>
                {
                    b.HasOne("api_vendace.Models.Dtos.ProductDto.Stock.StockItem", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendamode.Entities.Designs.DesignItem>", b =>
                {
                    b.HasOne("api_vendamode.Entities.Designs.DesignItem", "Entity")
                        .WithOne("Image")
                        .HasForeignKey("api_vendace.Entities.EntityImage<System.Guid, api_vendamode.Entities.Designs.DesignItem>", "EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendamode.Entities.Designs.LogoImages>", b =>
                {
                    b.HasOne("api_vendamode.Entities.Designs.LogoImages", "Entity")
                        .WithOne("FaviconThumbnail")
                        .HasForeignKey("api_vendace.Entities.EntityImage<System.Guid, api_vendamode.Entities.Designs.LogoImages>", "EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendamode.Entities.Products.Article>", b =>
                {
                    b.HasOne("api_vendamode.Entities.Products.Article", "Entity")
                        .WithOne("Image")
                        .HasForeignKey("api_vendace.Entities.EntityImage<System.Guid, api_vendamode.Entities.Products.Article>", "EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendamode.Entities.Products.Banner>", b =>
                {
                    b.HasOne("api_vendamode.Entities.Products.Banner", "Entity")
                        .WithOne("Image")
                        .HasForeignKey("api_vendace.Entities.EntityImage<System.Guid, api_vendamode.Entities.Products.Banner>", "EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendamode.Entities.Products.FooterBanner>", b =>
                {
                    b.HasOne("api_vendamode.Entities.Products.FooterBanner", "Entity")
                        .WithOne("Image")
                        .HasForeignKey("api_vendace.Entities.EntityImage<System.Guid, api_vendamode.Entities.Products.FooterBanner>", "EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendamode.Entities.Products.Order>", b =>
                {
                    b.HasOne("api_vendamode.Entities.Products.Order", "Entity")
                        .WithOne("PurchaseInvoice")
                        .HasForeignKey("api_vendace.Entities.EntityImage<System.Guid, api_vendamode.Entities.Products.Order>", "EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendamode.Entities.Products.Slider>", b =>
                {
                    b.HasOne("api_vendamode.Entities.Products.Slider", "Entity")
                        .WithOne("Image")
                        .HasForeignKey("api_vendace.Entities.EntityImage<System.Guid, api_vendamode.Entities.Products.Slider>", "EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityImage<System.Guid, api_vendamode.Models.Dtos.DescriptionEntity>", b =>
                {
                    b.HasOne("api_vendamode.Models.Dtos.DescriptionEntity", "Entity")
                        .WithOne("Thumbnail")
                        .HasForeignKey("api_vendace.Entities.EntityImage<System.Guid, api_vendamode.Models.Dtos.DescriptionEntity>", "EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityMainImage<System.Guid, api_vendace.Entities.Products.Product>", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.Product", "Entity")
                        .WithOne("MainImage")
                        .HasForeignKey("api_vendace.Entities.EntityMainImage<System.Guid, api_vendace.Entities.Products.Product>", "EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("api_vendace.Entities.EntityMainImage<System.Guid, api_vendamode.Entities.Designs.LogoImages>", b =>
                {
                    b.HasOne("api_vendamode.Entities.Designs.LogoImages", "Entity")
                        .WithOne("OrgThumbnail")
                        .HasForeignKey("api_vendace.Entities.EntityMainImage<System.Guid, api_vendamode.Entities.Designs.LogoImages>", "EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Category", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.Category", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.FeatureValue", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.ProductFeature", "ProductFeature")
                        .WithMany("Values")
                        .HasForeignKey("ProductFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductFeature");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Points", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.Review", null)
                        .WithMany("NegativePoints")
                        .HasForeignKey("NegativeReviewId");

                    b.HasOne("api_vendace.Entities.Products.Review", null)
                        .WithMany("PositivePoints")
                        .HasForeignKey("PositiveReviewId");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Product", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("api_vendace.Entities.Products.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_vendace.Models.Dtos.ProductDto.Category.CategoryLevels", "CategoryLevels")
                        .WithMany()
                        .HasForeignKey("CategoryLevelsId");

                    b.HasOne("api_vendace.Entities.Products.ProductScale", "ProductScale")
                        .WithOne("Product")
                        .HasForeignKey("api_vendace.Entities.Products.Product", "ProductScaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_vendace.Entities.Products.ProductSize", "ProductSizes")
                        .WithMany()
                        .HasForeignKey("ProductSizesId");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("CategoryLevels");

                    b.Navigation("ProductScale");

                    b.Navigation("ProductSizes");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Review", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.Product", "Product")
                        .WithMany("Review")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_vendace.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Sizes", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.ProductSize", null)
                        .WithMany("Sizes")
                        .HasForeignKey("ProductSizeId");
                });

            modelBuilder.Entity("api_vendace.Entities.Users.Address", b =>
                {
                    b.HasOne("api_vendace.Entities.Users.User", null)
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("api_vendace.Entities.Users.City", "City", b1 =>
                        {
                            b1.Property<Guid>("AddressId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Province_Id")
                                .HasColumnType("integer");

                            b1.Property<string>("Slug")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("AddressId");

                            b1.ToTable("Addresses");

                            b1.WithOwner()
                                .HasForeignKey("AddressId");
                        });

                    b.OwnsOne("api_vendace.Entities.Users.Province", "Province", b1 =>
                        {
                            b1.Property<Guid>("AddressId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Slug")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("AddressId");

                            b1.ToTable("Addresses");

                            b1.WithOwner()
                                .HasForeignKey("AddressId");
                        });

                    b.Navigation("City");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("api_vendace.Entities.Users.Security.Permission", b =>
                {
                    b.HasOne("api_vendace.Entities.Users.Security.Permission", "ParentPermission")
                        .WithMany("ChildPermissions")
                        .HasForeignKey("ParentPermissionId");

                    b.HasOne("api_vendace.Entities.Users.Security.Role", null)
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId");

                    b.Navigation("ParentPermission");
                });

            modelBuilder.Entity("api_vendace.Entities.Users.Security.Role", b =>
                {
                    b.HasOne("api_vendace.Entities.Users.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("api_vendace.Entities.Users.Security.UserRefreshToken", b =>
                {
                    b.HasOne("api_vendace.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("api_vendace.Entities.Users.Security.UserRole", b =>
                {
                    b.HasOne("api_vendace.Entities.Users.Security.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_vendace.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api_vendace.Entities.Users.UserSpecification", b =>
                {
                    b.HasOne("api_vendace.Entities.Users.User", null)
                        .WithOne("UserSpecification")
                        .HasForeignKey("api_vendace.Entities.Users.UserSpecification", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api_vendace.Models.Dtos.ObjectValue", b =>
                {
                    b.OwnsMany("api_vendace.Models.Dtos.Value", "Value", b1 =>
                        {
                            b1.Property<Guid>("ObjectValueId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ObjectValueId", "Id");

                            b1.ToTable("Value");

                            b1.WithOwner()
                                .HasForeignKey("ObjectValueId");
                        });

                    b.Navigation("Value");
                });

            modelBuilder.Entity("api_vendace.Models.Dtos.ProductDto.Category.CategoryLevels", b =>
                {
                    b.OwnsMany("api_vendace.Models.Dtos.EntityImageDto", "ImagesSrc", b1 =>
                        {
                            b1.Property<Guid>("CategoryLevelsId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("ImageUrl")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Placeholder")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("CategoryLevelsId", "Id");

                            b1.ToTable("CategoryLevels_ImagesSrc");

                            b1.WithOwner()
                                .HasForeignKey("CategoryLevelsId");
                        });

                    b.Navigation("ImagesSrc");
                });

            modelBuilder.Entity("api_vendace.Models.Dtos.ProductDto.Sizes.SizeIds", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.ProductScale", null)
                        .WithMany("Columns")
                        .HasForeignKey("ProductScaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api_vendace.Models.Dtos.ProductDto.Sizes.SizeModel", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.ProductScale", null)
                        .WithMany("Rows")
                        .HasForeignKey("ProductScaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api_vendace.Models.Dtos.ProductDto.Stock.StockItem", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.Product", null)
                        .WithMany("StockItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api_vendamode.Entities.ArticleReview", b =>
                {
                    b.HasOne("api_vendamode.Entities.Products.Article", "Article")
                        .WithMany("ArticleReviews")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_vendace.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api_vendamode.Entities.Products.Article", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("api_vendamode.Entities.Products.ArticleBanner", b =>
                {
                    b.HasOne("api_vendamode.Entities.Products.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("api_vendamode.Entities.Products.Cart", b =>
                {
                    b.HasOne("api_vendace.Models.Dtos.ObjectValue", "Features")
                        .WithMany()
                        .HasForeignKey("FeaturesId");

                    b.HasOne("api_vendamode.Entities.Products.Order", null)
                        .WithMany("Cart")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("api_vendace.Models.Dtos.ProductDto.ColorDTO", "Color", b1 =>
                        {
                            b1.Property<Guid>("CartId")
                                .HasColumnType("uuid");

                            b1.Property<string>("HexCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("CartId");

                            b1.ToTable("Cart");

                            b1.WithOwner()
                                .HasForeignKey("CartId");
                        });

                    b.OwnsOne("api_vendace.Models.Dtos.ProductDto.Sizes.SizeDTO", "Size", b1 =>
                        {
                            b1.Property<Guid>("CartId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Count")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("Created")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<bool>("IsDeleted")
                                .HasColumnType("boolean");

                            b1.Property<DateTime?>("LastUpdated")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("CartId");

                            b1.ToTable("Cart");

                            b1.WithOwner()
                                .HasForeignKey("CartId");
                        });

                    b.OwnsOne("api_vendace.Models.Dtos.EntityImageDto", "Img", b1 =>
                        {
                            b1.Property<Guid>("CartId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<string>("ImageUrl")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Placeholder")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("CartId");

                            b1.ToTable("Cart");

                            b1.WithOwner()
                                .HasForeignKey("CartId");
                        });

                    b.Navigation("Color");

                    b.Navigation("Features");

                    b.Navigation("Img");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("api_vendamode.Entities.Products.CategoryProductFeature", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.Category", "Category")
                        .WithMany("CategoryProductFeatures")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_vendace.Entities.Products.ProductFeature", "ProductFeature")
                        .WithMany("CategoryProductFeatures")
                        .HasForeignKey("ProductFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("ProductFeature");
                });

            modelBuilder.Entity("api_vendamode.Entities.Products.CategoryProductSize", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.Category", "Category")
                        .WithMany("CategoryProductSizes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_vendace.Entities.Products.ProductSize", "ProductSize")
                        .WithMany("CategoryProductSizes")
                        .HasForeignKey("ProductSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("ProductSize");
                });

            modelBuilder.Entity("api_vendamode.Entities.Products.CategorySize", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.Category", "Category")
                        .WithMany("CategorySizes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_vendace.Entities.Products.Sizes", "Size")
                        .WithMany("CategorySizes")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("api_vendamode.Entities.Products.Order", b =>
                {
                    b.HasOne("api_vendace.Entities.Users.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_vendamode.Entities.Canceled", "Canceled")
                        .WithMany()
                        .HasForeignKey("CanceledId");

                    b.HasOne("api_vendamode.Entities.Returned", "Returned")
                        .WithMany()
                        .HasForeignKey("ReturnedId");

                    b.HasOne("api_vendace.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Canceled");

                    b.Navigation("Returned");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api_vendamode.Entities.Products.ProductSizeProductSizeValue", b =>
                {
                    b.HasOne("api_vendace.Entities.Products.ProductSize", "ProductSize")
                        .WithMany("ProductSizeProductSizeValues")
                        .HasForeignKey("ProductSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_vendace.Entities.Products.ProductSizeValues", "ProductSizeValue")
                        .WithMany("ProductSizeProductSizeValues")
                        .HasForeignKey("ProductSizeValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductSize");

                    b.Navigation("ProductSizeValue");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Brand", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Category", b =>
                {
                    b.Navigation("CategoryProductFeatures");

                    b.Navigation("CategoryProductSizes");

                    b.Navigation("CategorySizes");

                    b.Navigation("ChildCategories");

                    b.Navigation("Images");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("MainImage")
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("StockItems");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.ProductFeature", b =>
                {
                    b.Navigation("CategoryProductFeatures");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.ProductScale", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Product");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.ProductSize", b =>
                {
                    b.Navigation("CategoryProductSizes");

                    b.Navigation("Images");

                    b.Navigation("ProductSizeProductSizeValues");

                    b.Navigation("Sizes");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.ProductSizeValues", b =>
                {
                    b.Navigation("ProductSizeProductSizeValues");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Review", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("NegativePoints");

                    b.Navigation("PositivePoints");
                });

            modelBuilder.Entity("api_vendace.Entities.Products.Sizes", b =>
                {
                    b.Navigation("CategorySizes");
                });

            modelBuilder.Entity("api_vendace.Entities.Users.Security.Permission", b =>
                {
                    b.Navigation("ChildPermissions");
                });

            modelBuilder.Entity("api_vendace.Entities.Users.Security.Role", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("api_vendace.Entities.Users.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Images");

                    b.Navigation("Roles");

                    b.Navigation("UserSpecification")
                        .IsRequired();
                });

            modelBuilder.Entity("api_vendace.Entities.Users.UserSpecification", b =>
                {
                    b.Navigation("IdCardImages");
                });

            modelBuilder.Entity("api_vendace.Models.Dtos.ProductDto.Stock.StockItem", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("api_vendamode.Entities.Designs.DesignItem", b =>
                {
                    b.Navigation("Image");
                });

            modelBuilder.Entity("api_vendamode.Entities.Designs.LogoImages", b =>
                {
                    b.Navigation("FaviconThumbnail");

                    b.Navigation("OrgThumbnail");
                });

            modelBuilder.Entity("api_vendamode.Entities.Products.Article", b =>
                {
                    b.Navigation("ArticleReviews");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("api_vendamode.Entities.Products.Banner", b =>
                {
                    b.Navigation("Image");
                });

            modelBuilder.Entity("api_vendamode.Entities.Products.FooterBanner", b =>
                {
                    b.Navigation("Image");
                });

            modelBuilder.Entity("api_vendamode.Entities.Products.Order", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("PurchaseInvoice");
                });

            modelBuilder.Entity("api_vendamode.Entities.Products.Slider", b =>
                {
                    b.Navigation("Image");
                });

            modelBuilder.Entity("api_vendamode.Models.Dtos.DescriptionEntity", b =>
                {
                    b.Navigation("Thumbnail")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
